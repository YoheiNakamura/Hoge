<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>CANVASテスト</title>
    <link rel="stylesheet" href="css/style.css" type="text/css" media="all">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
</head>
<body>
<div id="container-fluid">
    <div class="row">
        <div class="col-md-6">
            <canvas id="board"></canvas>
        </div>
        <div class="col-md-6">
            <form id="frm">
                <div id="input-form"></div>
                <button type="button" id="btn-send" class="btn btn-primary">保存する</button>
            </form>
        </div>
    </div>
</div>
<script src="js/app.js"></script>
 <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
 <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
 <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>

</body>
</html>

//キャンバスの固定サイズ。横:縦=4:3が望ましい。
const CANVAS_WIDTH = "600";
const CANVAS_HEIGHT = "450";

/*
Banner      :Canvasにテキストを書ける四角のエリアとその入力フォームを生成するオブジェクト。
〜変数〜
label       :エリアの役割名。右側の入力フォームに表示。
bgcolor     :背景色 ex) "#000000"
fontsize    :フォントサイズ ex) 24
fontstyle   :フォントの種類 ex) "メイリオ"
fontcolor   :フォントの種類 ex) "#FFFFFF"
text        :描画するテキスト
width       :Bannerの横幅
height      :Bannerの縦幅
px          :Bannerのx方向の描画位置
py          :Bannerのy方向の描画位置
paddingX    :文字を描画する際のBannerのx方向のパディング
paddingY    :文字を描画する際のBannerのy方向のパディング
horizontalAlign :Bannerの水平方向のアライン
verticalAlign   :Bannerの垂直方向のアライン

*/
var Banner = function(label, bgcolor, fontsize, fontstyle, fontcolor, text, width, height, px, py, paddingX, paddingY,  horizontalAlign, verticalAlign) {
    
    //初期処理
    this.label = label;
    this.bgcolor = bgcolor;
    this.fontsize = fontsize;
    this.fontstyle = fontstyle;
    this.fontcolor = fontcolor;
    this.text = text;
    this.width = width;
    this.height = height;
    this.px = px;
    this.py = py;
    this.paddingX = paddingX;
    this.paddingY = paddingY;
    this.horizontalAlign = horizontalAlign;
    this.verticalAlign = verticalAlign;

    //描画に必要なフォームのhtmlタグを生成します
    const inputForm = document.getElementById("input-form");
    var inputFormHtml =
        `
            <p>${this.label}</p>
            <span>文字色:</span>
            <input class="color-text" type="color" value=${this.fontcolor}>
            <span>背景色:</span>
            <input class="color-bg" type="color" value=${this.bgcolor}>
            <span>フォントサイズ:</span>
            <input class="font-size" type="number" value=${this.fontsize}>
            <br>
            <textarea type="text" class="text-message" placeholder="文字を入力してください">${this.text}</textarea>
            <br><br>
        `;
    inputForm.insertAdjacentHTML("beforeend", inputFormHtml);

    //キャンバスに描画
    this.drawBanner();
}

Banner.prototype = {
    
    drawBanner : function() {

        var context = board.getContext("2d");
        //エリアを初期化
        context.clearRect(this.px, this.py, this.width, this.height);

        //背景を描画
        context.fillStyle = this.bgcolor;
        context.fillRect(this.px, this.py, this.width, this.height);
        
        //ここから下はテキストの描画
        context.font = `${this.fontsize}px ${this.fontstyle}`;
        context.fillStyle = this.fontcolor;
        context.textBaseline = "top";

        //paddingを考慮してテキスト描画の有効エリアを再設定。
        const epx = this.px + this.paddingX;
        const epy = this.py + this.paddingY;
        const eWidth = this.width - this.paddingX * 2;
        const eHeight = this.height - this.paddingY * 2;

        //改行に対応します。
        //まずバナーの高さから改行数の最大を計算
        var i = 0;
        var textHeight =  context.measureText('あ').width;
        var maxRowNumber = 1;

        while((maxRowNumber + 1) * textHeight <= eHeight) {
            maxRowNumber++;
        }
        //文章の長さがバナーの幅を超える時か改行コードがある時は文字列を分割。
        var textNl = [];
        var tempText = "";
        var charArray = this.text.split("");
        //1文字ずつに分解して見ていきます。
        for(i=0; i < charArray.length; i++) {
            //最大行数を超えるとtextNlに追加しないようにします。
            if(textNl.length >= maxRowNumber) {
                break;
            }
            //改行コードがあれば次の行へ。
            if(charArray[i] == "\n") {
                textNl.push(tempText);
                tempText = "";
                continue;
            }
            //描画するときに文字の幅がテキストの有効エリアを超えていれば改行する。
            if(context.measureText(tempText).width < eWidth) {
                tempText += charArray[i];
            } else {
                textNl.push(tempText);
                tempText = "";
                continue;
            }
        }
        //最後の一行を描画
        if(tempText.length > 0) {
            textNl.push(tempText);
        }

        for(i=0; i < textNl.length; i++) {
            var textWidth = context.measureText(textNl[i]).width ;
            var x = epx;
            var y = epy;
            //中央寄せかによって描画位置を変えます。
            if(this.horizontalAlign == "center") {
                x = (this.width - textWidth) / 2;
            }
            if(this.verticalAlign == "center") {
                y = this.py + (this.height - textHeight * textNl.length) / 2 + textHeight * i;
            }

            context.fillText(textNl[i], x, y, this.width);
        }
    },
    setText : function(text) {
        this.text = text;
    },
    setBgcolor : function(bgcolor) {
        this.bgcolor = bgcolor;
    },
    setFontcolor : function(fontcolor) {
        this.fontcolor = fontcolor;
    },
    setFontsize : function(fontsize) {
        this.fontsize = fontsize;
    }
}

function selectFormat(type) {
    c(type);
}

window.onload = ()=>{

    const board = document.getElementById("board");
    board.width = CANVAS_WIDTH;
    board.height = CANVAS_HEIGHT;
    
    var BannerArray = [];
    BannerArray[0] = new Banner("Before", "#0FFFFF", 30, "メイリオ", "#0000FF", "goodbye", CANVAS_WIDTH, CANVAS_HEIGHT * 0.2, 0, 0, 10, 10, "left", "center");
    BannerArray[1] = new Banner("タイトル", "#888888", 40, "メイリオ", "#000000", "Title", CANVAS_WIDTH, CANVAS_HEIGHT * 0.2, 0, CANVAS_HEIGHT * 0.2, 30, 10, "center", "center");
    BannerArray[2] = new Banner("内容２", "#000FFF", 20, "メイリオ", "#000000", "hoge", CANVAS_WIDTH, CANVAS_HEIGHT * 0.6, 0, CANVAS_HEIGHT * 0.4, 10, 10, "left", "center");
    
    const messages = document.getElementsByClassName("text-message");
    const colorTexts = document.getElementsByClassName("color-text");
    const colorBgs = document.getElementsByClassName("color-bg");
    const fontSizes = document.getElementsByClassName("font-size");
    const format = document.getElementById('format');

    // 文字入力のイベントを設定
    Array.prototype.forEach.call(messages, function(message, index) {      
        message.addEventListener("keyup", ()=>{
            BannerArray[index].setText(message.value);
            BannerArray[index].drawBanner();
        });
    });

    // 文字色変更のイベントを設定
    Array.prototype.forEach.call(colorTexts, function(colorText, index) {
        colorText.addEventListener("change", ()=>{
            BannerArray[index].setFontcolor(colorText.value);
            BannerArray[index].drawBanner();
        });
    });

    // 背景色変更のイベントを設定
    Array.prototype.forEach.call(colorBgs, function(colorBg, index) {      
        colorBg.addEventListener("change", ()=>{
        BannerArray[index].setBgcolor(colorBg.value);
        BannerArray[index].drawBanner();
        })
    });

    // フォントサイズ変更のイベントを設定
    Array.prototype.forEach.call(fontSizes, function(fontSize, index) {      
        fontSize.addEventListener("change", ()=>{
            BannerArray[index].setFontsize(fontSize.value);
            BannerArray[index].drawBanner();
        });
    });

    // submitイベントが発生したらキャンセル
    document.querySelector("#frm").addEventListener("submit", (e)=>{
        e.preventDefault();
    });

    format.addEventListener("change", ()=>{
        c("hoge");
    });

  //---------------------------------------------
  // 保存ボタンが押されたらサーバへ送信する
  //---------------------------------------------
  document.querySelector("#btn-send").addEventListener("click", ()=>{
    // Canvasのデータを取得
    const canvas = board.toDataURL("image/png");  // DataURI Schemaが返却される

    // 送信情報の設定
    const param  = {
      method: "POST",
      headers: {
        "Content-Type": "application/json; charset=utf-8"
      },
      body: JSON.stringify({data: canvas})
    };

    // サーバへ送信
    sendServer(SAVE_URL, param);
  });
};

function c(str) {
    console.log(str);
}